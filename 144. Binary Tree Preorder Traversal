// https://leetcode.com/problems/binary-tree-preorder-traversal/
// https://leetcode.com/problems/binary-tree-preorder-traversal/
package tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class PreorderTraversal {

	// Recursive solution
	
	public List<Integer> preorderTraversal(TreeNode root){
		List<Integer> result = new ArrayList<Integer>();
		preOrder(root,result);
		return result;
	}
	
	public void preOrder(TreeNode root, List<Integer> list) {
		if(root==null)
			return;
		list.add(root.val);
		preOrder(root.left,list);
		preOrder(root.right,list);
	}
	
	// Recursive end
	
	// Iterative solution
	
	public List<Integer> preorderIterativeTravers(TreeNode root){
		List<Integer> result =new ArrayList<Integer>();
		Stack<TreeNode> stack = new Stack<>();
		TreeNode cur = root;
		
		while(!stack.isEmpty() || cur != null) {
			if(cur != null) {
				result.add(cur.val);
				stack.push(cur.right);
				cur=cur.left;
			}else {
				cur=stack.pop();
			}
		}
		return result;
	}
	
	// Iterative end
	
	public static void main(String[] args) {
		
		PreorderTraversal pt = new PreorderTraversal();
		
		TreeNode root = new TreeNode(1);

		TreeNode n2 = new TreeNode(2);
		TreeNode n3 = new TreeNode(3);
		TreeNode n4 = new TreeNode(4);
		TreeNode n5 = null;
		TreeNode n6 = null;
		TreeNode n7 = null;
		
		root.right = n3;
		root.left = n2;
		n3.right = n4;
		n2.left= n5;
		n2.right=n6;
		n3.left=n7;
		
		System.out.println(pt.preorderIterativeTravers(root));

	}

}

