package tree;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class FindDuplicateSubtrees {

	public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
		
		Map<String, Integer> map = new HashMap<>();
		List<TreeNode> duplicates = new ArrayList<>();
		
		dfs(root, map, duplicates);
		
		return duplicates;
		

	}
	
	public String dfs(TreeNode node, Map<String, Integer> map, List<TreeNode> duplicates) {
		if(node==null) {
			return "#";
		}
		String left = dfs(node.left, map, duplicates);
		String right = dfs(node.right, map, duplicates);
		
		String serialized = node.val + "," + left + "," + right;
		
		map.put(serialized, map.getOrDefault(serialized, 0)+1);
		
		if(map.get(serialized)==2) {
			duplicates.add(node);
		}
		
		return serialized;
	}

	public static void main(String[] args) {
		
		TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.right.left = new TreeNode(2);
        root.right.right = new TreeNode(4);
        root.right.left.left = new TreeNode(4);
        
        // Find duplicate subtrees
        FindDuplicateSubtrees solution = new FindDuplicateSubtrees();
        
        List<TreeNode> result = solution.findDuplicateSubtrees(root);
        
        for(TreeNode node: result) {
        	System.out.println(node.val);
        }
        

	}

}
