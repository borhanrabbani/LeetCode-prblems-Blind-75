// https://leetcode.com/problems/binary-tree-postorder-traversal

package tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class PostOrderTraversal {
	
	// Recursive solution
	
	public List<Integer> postOrderTraversal(TreeNode root){
		List<Integer> result = new ArrayList<Integer>();
		postOrder(root, result);
		return result;
	}
	
	public void postOrder(TreeNode root, List<Integer> result) {
		if(root == null) 
			return;
		postOrder(root.left,result);
		postOrder(root.right,result);
		result.add(root.val);
	}
	
	// Recursive end
	
	// Iterative Solution
	public List<Integer> postOrderIterative(TreeNode root){
		List<Integer> list = new ArrayList<Integer>();
		Stack<TreeNode> stack = new Stack<>();
		Stack<Boolean> visit = new Stack<>();
		
		stack.add(root);
		visit.add(false);
		
		while(!stack.isEmpty()) {
			TreeNode curr = stack.pop();
			boolean v = visit.pop();
			if(curr != null) {
				if(v != false) {
					list.add(curr.val);
				}else {
					stack.add(curr);
					visit.add(true);
					stack.add(curr.right);
					visit.add(false);
					stack.add(curr.left);
					visit.add(false);
				}
			}
		}
		
		return list;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		PostOrderTraversal pot = new PostOrderTraversal();
		
		TreeNode root = new TreeNode(1);

		TreeNode n2 = new TreeNode(2);
		TreeNode n3 = new TreeNode(3);
		TreeNode n4 = new TreeNode(4);
		TreeNode n5 = null;
		TreeNode n6 = null;
		TreeNode n7 = null;
		
		root.right = n3;
		root.left = n2;
		n3.right = n4;
		n2.left= n5;
		n2.right=n6;
		n3.left=n7;
		
		System.out.println(pot.postOrderIterative(root));

	}

}
