package tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BinaryTreeZigzagLevelOrderTraversal {
	
	public List<List<Integer>> zigzagLevelOrder(TreeNode root){
		List<List<Integer>> result = new ArrayList<>();
		
		if(root==null) {
			return result;
		}
		
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		
		boolean flag=false;
		
		while(!queue.isEmpty()) {
			int size = queue.size();
			List<Integer> list = new ArrayList<>();
			
			for(int i=0; i<size; i++) {
				TreeNode node = queue.poll();
				if(flag) {
					list.add(0, node.val);  // Add at the beginning for reverse order
				}else {
					list.add(node.val);  // Add at the end for normal order
				}
				
				if(node.left!=null) {
					queue.offer(node.left);
				}
				if(node.right!=null) {
					queue.offer(node.right);
				}
			}
			result.add(list);
			flag=!flag; // Flip the flag for the next level
		}
		
		
		return result;
	}
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		TreeNode node5 = new TreeNode(7);
		TreeNode node6 = new TreeNode(6);
		TreeNode node2 = new TreeNode(9);
		TreeNode node3 = new TreeNode(20);
		TreeNode node4 = new TreeNode(15);

        // Build the tree structure


        TreeNode root = new TreeNode(3);
        
        root.left=node2;
        root.right=node3;
        
        node3.left=node4;
        node3.right=node5;
        
        BinaryTreeZigzagLevelOrderTraversal bzl = new BinaryTreeZigzagLevelOrderTraversal();
        System.out.println(bzl.zigzagLevelOrder(root));

	}

}
