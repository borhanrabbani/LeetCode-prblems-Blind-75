package graph;

public class SurroundedRegions {

	public void solve(char[][] board) {
		int r = board.length;
		int c = board[0].length;
		
		for(int i=0; i<c; i++) {
			if(board[0][i]=='O') {
				dfs(board, 0, i);
			}
			if(board[r-1][i]=='O') {
				dfs(board, r-1, i);
			}
		}
		
		for(int i=0; i<r; i++) {
			if(board[i][0]=='O') {
				dfs(board, i, 0);
			}
			if(board[i][c-1]=='O') {
				dfs(board,i,c-1);
			}
		}
		
		for(int i=0; i<r; i++) {
			for(int j=0; j<c; j++) {
				if(board[i][j]=='O') {
					board[i][j]='X';
				}
				if(board[i][j]=='S') {
					board[i][j]='O';
				}
			}
		}
	}
	
	private void dfs(char[][] board, int row, int col) {
		int r = board.length;
		int c = board[0].length;
		
		if(row<0 || row >= r || col<0 || col>=c || board[row][col] != 'O') {
			return;
		}
		
		board[row][col]='S';
		
		dfs(board, row+1, col);
		dfs(board, row-1, col);
		dfs(board, row, col+1);
		dfs(board, row, col-1);
		
	}

	public static void main(String[] args) {
		SurroundedRegions sr = new SurroundedRegions();
		
		
	}

}
