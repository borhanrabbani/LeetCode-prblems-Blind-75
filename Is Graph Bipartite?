package graph;

import java.util.LinkedList;
import java.util.Queue;

public class IsGraphBipartite {

	public boolean isBipartite(int[][] graph) {
		int v = graph.length;
		int[] colors = new int[v];
		
		for(int i=0; i<v; i++) {
			if(colors[i]==0) {
//				if(!dfs(graph, i, colors,1)) {
//					return false;
//				}
				
				if(!bfs(graph,i,colors)) {
					return false;
				}
			}
		}
		
		return true;
	}
	
	private boolean dfs(int[][] graph, int vertex, int[] colors, int color) {
		colors[vertex] = color;
		System.out.println("C:"+color);
//		System.out.print(" v: "+vertex);
		
		for(int neighbor: graph[vertex]) {
			System.out.print(" n: "+neighbor);
			if(colors[neighbor]==color) {
				return false;
			}
			if(colors[neighbor]==0 && !dfs(graph, neighbor, colors, -color)) {
				return false;
			}
			System.out.println();
		}
		
		return true;
	}
	
	private boolean bfs(int[][] graph, int vertex, int[] colors) {
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(vertex);
		colors[vertex] = 1;
		
		while(!queue.isEmpty()) {
			int cur = queue.poll();
			
			for(int nei: graph[cur]) {
				if(colors[cur]==colors[nei]) {
					return false; // adjacent vertex has the same color, not bipartite.
				}
				
				if(colors[nei]==0) {
					colors[nei]=-colors[cur];
					queue.offer(nei);
				}
			}
		}
		
		return true;
	}

	public static void main(String[] args) {
		
		IsGraphBipartite gb = new IsGraphBipartite();
		int[][] graph1 = { {1, 3}, {0, 2}, {1, 3}, {0, 2} };
		int[][] graph2 = { {1, 2, 3}, {0, 2}, {0, 1, 3}, {0, 2} };
		System.out.println(gb.isBipartite(graph1));
	}

}
