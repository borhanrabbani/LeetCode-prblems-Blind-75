package tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class NaryTreeLevelOrderTraversal {
	
	public List<Integer> levelOrder(NaryNode root){
		List<Integer> list = new ArrayList<>();
		
		if(root == null) {
			return list;
		}
		
		Queue<NaryNode> queue = new LinkedList<>();
		
		queue.offer(root);
		
		
		while(!queue.isEmpty()) {
			int size = queue.size();
			
			
			for(int i=0; i<size; i++) {
				NaryNode node = queue.poll();
				list.add(node.val);
				
				for(NaryNode temp: node.child) {
					queue.offer(temp);
				}
			}
			
		}
			
		return list;
	}

	public static void main(String[] args) {
		 NaryNode node5 = new NaryNode(5);
	        NaryNode node6 = new NaryNode(6);
	        NaryNode node2 = new NaryNode(2);
	        NaryNode node3 = new NaryNode(3);
	        NaryNode node4 = new NaryNode(4);

	        // Build the tree structure
	        node3.child.add(node5);
	        node3.child.add(node6);

	        NaryNode root = new NaryNode(1);
	        root.child.add(node3);
	        root.child.add(node2);
	        root.child.add(node4);
	        
	        NaryTreeLevelOrderTraversal levelOrder = new NaryTreeLevelOrderTraversal();
	        System.out.println(levelOrder.levelOrder(root));
	}

}
